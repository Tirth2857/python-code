{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNLG1OY/yoYjs9WvXT8iDWd"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "A list contains names of boys and girls as its elements. Boysâ€™ names are stored as tuples. Write a program to find out number of boys and girls in the list."
      ],
      "metadata": {
        "id": "5iZrlvFLR4ZJ"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Jqjkxz2HR1Z_",
        "outputId": "2637c1f6-f6a6-4afa-e586-2bdc4f5bc921"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of boys: 3\n",
            "Number of girls: 4\n"
          ]
        }
      ],
      "source": [
        "names_list = [\"Vaidehi\", (\"Sharvil\",), \"Tanirika\", (\"Bhargav\",), \"Yamika\", \"Ekisha\", (\"Pranit\",)]\n",
        "\n",
        "boys_count = 0\n",
        "girls_count = 0\n",
        "\n",
        "for ele in names_list:\n",
        "    if isinstance(ele, tuple):\n",
        "        boys_count += 1\n",
        "    else:\n",
        "        girls_count += 1\n",
        "\n",
        "print(\"Number of boys:\", boys_count)\n",
        "print(\"Number of girls:\", girls_count)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "A list contains tuples containing roll no., name and age of student. Write a python program to create\n",
        "three lists separately for roll no., name and age"
      ],
      "metadata": {
        "id": "KQRX3nE9UtgG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "students = [\n",
        "    (301, \"Tushar\", 20),\n",
        "    (302, \"Harmanpreet\", 22),\n",
        "    (303, \"Rakul\", 21),\n",
        "    (304, \"Virat\", 23),\n",
        "    (305, \"Rohit\", 24)\n",
        "]\n",
        "\n",
        "roll_nos = []\n",
        "names = []\n",
        "ages = []\n",
        "\n",
        "for student in students:\n",
        "    roll_nos.append(student[0])\n",
        "    names.append(student[1])\n",
        "    ages.append(student[2])\n",
        "\n",
        "print(\"Roll Numbers:\", roll_nos)\n",
        "print(\"Names:\", names)\n",
        "print(\"Ages:\", ages)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BRFx7GKFU7Ls",
        "outputId": "8cd32631-a2df-4845-be63-15feecb8e15e"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Roll Numbers: [301, 302, 303, 304, 305]\n",
            "Names: ['Tushar', 'Harmanpreet', 'Rakul', 'Virat', 'Rohit']\n",
            "Ages: [20, 22, 21, 23, 24]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Suppose a date is represented as a tuple (d, m, y). Create two date tuples and find the number of\n",
        "days between the two dates"
      ],
      "metadata": {
        "id": "IuhBjF8MVac3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from datetime import date\n",
        "\n",
        "date1 = (12, 4, 2023)\n",
        "date2 = (18, 4, 2025)\n",
        "\n",
        "d1 = date(date1[2], date1[1], date1[0])\n",
        "d2 = date(date2[2], date2[1], date2[0])\n",
        "\n",
        "difference = abs((d2 - d1).days)\n",
        "\n",
        "print(\"Number of days between the two dates:\", difference)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_-ll-DCHVeqh",
        "outputId": "d39ad286-be0b-4cba-c548-9315731e745e"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of days between the two dates: 737\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Create a list of tuples containing a food item and its price. Sort the tuples in descending order by\n",
        "price."
      ],
      "metadata": {
        "id": "DKsfQ4Y7WQQO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "food_items = [\n",
        "    (\"Paneer Tikka\", 250),\n",
        "    (\"Masala Dosa\", 90),\n",
        "    (\"Gulab Jamun\", 60),\n",
        "    (\"Aloo Gobi\", 120),\n",
        "    (\"Chole Bhature\", 150)\n",
        "]\n",
        "\n",
        "sorted_items = sorted(food_items, key=lambda x: x[1], reverse=True)\n",
        "\n",
        "print(\"Sorted vegetarian food items by price (high to low):\")\n",
        "for item in sorted_items:\n",
        "    print(item)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KqJYd10gWfhN",
        "outputId": "c663a3da-fdef-435c-ff7c-6dee83d11c9e"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sorted vegetarian food items by price (high to low):\n",
            "('Paneer Tikka', 250)\n",
            "('Chole Bhature', 150)\n",
            "('Aloo Gobi', 120)\n",
            "('Masala Dosa', 90)\n",
            "('Gulab Jamun', 60)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Remove empty tuple(s) from the list of tuples."
      ],
      "metadata": {
        "id": "uigP_SzVWj6u"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "food_items = [\n",
        "    (\"Paneer Tikka\", 250),\n",
        "    (\"Masala Dosa\", 90),\n",
        "    (\"Gulab Jamun\", 60),\n",
        "    (),\n",
        "    (\"Aloo Gobi\", 120),\n",
        "    (),\n",
        "    (\"Chole Bhature\", 150)\n",
        "]\n",
        "\n",
        "food_items = [item for item in food_items if item]  # Remove empty tuples\n",
        "\n",
        "print(\"List after removing empty tuples:\")\n",
        "for item in food_items:\n",
        "    print(item)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pOTS4VKAWnB7",
        "outputId": "86b7da5e-b9a4-456f-b74b-c884675f6d17"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "List after removing empty tuples:\n",
            "('Paneer Tikka', 250)\n",
            "('Masala Dosa', 90)\n",
            "('Gulab Jamun', 60)\n",
            "('Aloo Gobi', 120)\n",
            "('Chole Bhature', 150)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Modify an element of a tuple."
      ],
      "metadata": {
        "id": "4T9f0ySbWypM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "food_item = (\"Paneer Tikka\", 250)\n",
        "\n",
        "food_item_list = list(food_item)\n",
        "food_item_list[1] = 300\n",
        "food_item = tuple(food_item_list)\n",
        "\n",
        "print(\"Modified tuple:\", food_item)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tfbX9E9iW1bq",
        "outputId": "45d901ce-5f7a-4c1b-c464-2d008f57ea9a"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Modified tuple: ('Paneer Tikka', 300)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Delete an element of a tuple."
      ],
      "metadata": {
        "id": "DYXUdB6kXM2c"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "food_item = (\"Paneer Tikka\", 250, \"Masala Dosa\", 90)\n",
        "\n",
        "food_item_list = list(food_item)\n",
        "del food_item_list[1]\n",
        "food_item = tuple(food_item_list)\n",
        "\n",
        "print(\"Tuple after deletion:\", food_item)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aGfU7q-OXYnv",
        "outputId": "1ccf53f8-c79c-4a62-dd17-5e1520983619"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Tuple after deletion: ('Paneer Tikka', 'Masala Dosa', 90)\n"
          ]
        }
      ]
    }
  ]
}